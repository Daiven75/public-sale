/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro.kafka.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Proposal extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5083930290163910545L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Proposal\",\"namespace\":\"avro.kafka.model\",\"fields\":[{\"name\":\"product\",\"type\":{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}},{\"name\":\"bidValue\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":9,\"scale\":2}},{\"name\":\"author\",\"type\":{\"type\":\"record\",\"name\":\"Author\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Proposal> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Proposal> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Proposal> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Proposal> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Proposal> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Proposal to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Proposal from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Proposal instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Proposal fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private avro.kafka.model.Product product;
  private java.math.BigDecimal bidValue;
  private avro.kafka.model.Author author;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Proposal() {}

  /**
   * All-args constructor.
   * @param product The new value for product
   * @param bidValue The new value for bidValue
   * @param author The new value for author
   */
  public Proposal(avro.kafka.model.Product product, java.math.BigDecimal bidValue, avro.kafka.model.Author author) {
    this.product = product;
    this.bidValue = bidValue;
    this.author = author;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return product;
    case 1: return bidValue;
    case 2: return author;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: product = (avro.kafka.model.Product)value$; break;
    case 1: bidValue = (java.math.BigDecimal)value$; break;
    case 2: author = (avro.kafka.model.Author)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'product' field.
   * @return The value of the 'product' field.
   */
  public avro.kafka.model.Product getProduct() {
    return product;
  }



  /**
   * Gets the value of the 'bidValue' field.
   * @return The value of the 'bidValue' field.
   */
  public java.math.BigDecimal getBidValue() {
    return bidValue;
  }



  /**
   * Gets the value of the 'author' field.
   * @return The value of the 'author' field.
   */
  public avro.kafka.model.Author getAuthor() {
    return author;
  }



  /**
   * Creates a new Proposal RecordBuilder.
   * @return A new Proposal RecordBuilder
   */
  public static avro.kafka.model.Proposal.Builder newBuilder() {
    return new avro.kafka.model.Proposal.Builder();
  }

  /**
   * Creates a new Proposal RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Proposal RecordBuilder
   */
  public static avro.kafka.model.Proposal.Builder newBuilder(avro.kafka.model.Proposal.Builder other) {
    if (other == null) {
      return new avro.kafka.model.Proposal.Builder();
    } else {
      return new avro.kafka.model.Proposal.Builder(other);
    }
  }

  /**
   * Creates a new Proposal RecordBuilder by copying an existing Proposal instance.
   * @param other The existing instance to copy.
   * @return A new Proposal RecordBuilder
   */
  public static avro.kafka.model.Proposal.Builder newBuilder(avro.kafka.model.Proposal other) {
    if (other == null) {
      return new avro.kafka.model.Proposal.Builder();
    } else {
      return new avro.kafka.model.Proposal.Builder(other);
    }
  }

  /**
   * RecordBuilder for Proposal instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Proposal>
    implements org.apache.avro.data.RecordBuilder<Proposal> {

    private avro.kafka.model.Product product;
    private avro.kafka.model.Product.Builder productBuilder;
    private java.math.BigDecimal bidValue;
    private avro.kafka.model.Author author;
    private avro.kafka.model.Author.Builder authorBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.kafka.model.Proposal.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasProductBuilder()) {
        this.productBuilder = avro.kafka.model.Product.newBuilder(other.getProductBuilder());
      }
      if (isValidValue(fields()[1], other.bidValue)) {
        this.bidValue = data().deepCopy(fields()[1].schema(), other.bidValue);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.author)) {
        this.author = data().deepCopy(fields()[2].schema(), other.author);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasAuthorBuilder()) {
        this.authorBuilder = avro.kafka.model.Author.newBuilder(other.getAuthorBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing Proposal instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.kafka.model.Proposal other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.product)) {
        this.product = data().deepCopy(fields()[0].schema(), other.product);
        fieldSetFlags()[0] = true;
      }
      this.productBuilder = null;
      if (isValidValue(fields()[1], other.bidValue)) {
        this.bidValue = data().deepCopy(fields()[1].schema(), other.bidValue);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.author)) {
        this.author = data().deepCopy(fields()[2].schema(), other.author);
        fieldSetFlags()[2] = true;
      }
      this.authorBuilder = null;
    }

    /**
      * Gets the value of the 'product' field.
      * @return The value.
      */
    public avro.kafka.model.Product getProduct() {
      return product;
    }


    /**
      * Sets the value of the 'product' field.
      * @param value The value of 'product'.
      * @return This builder.
      */
    public avro.kafka.model.Proposal.Builder setProduct(avro.kafka.model.Product value) {
      validate(fields()[0], value);
      this.productBuilder = null;
      this.product = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'product' field has been set.
      * @return True if the 'product' field has been set, false otherwise.
      */
    public boolean hasProduct() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'product' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public avro.kafka.model.Product.Builder getProductBuilder() {
      if (productBuilder == null) {
        if (hasProduct()) {
          setProductBuilder(avro.kafka.model.Product.newBuilder(product));
        } else {
          setProductBuilder(avro.kafka.model.Product.newBuilder());
        }
      }
      return productBuilder;
    }

    /**
     * Sets the Builder instance for the 'product' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public avro.kafka.model.Proposal.Builder setProductBuilder(avro.kafka.model.Product.Builder value) {
      clearProduct();
      productBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'product' field has an active Builder instance
     * @return True if the 'product' field has an active Builder instance
     */
    public boolean hasProductBuilder() {
      return productBuilder != null;
    }

    /**
      * Clears the value of the 'product' field.
      * @return This builder.
      */
    public avro.kafka.model.Proposal.Builder clearProduct() {
      product = null;
      productBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bidValue' field.
      * @return The value.
      */
    public java.math.BigDecimal getBidValue() {
      return bidValue;
    }


    /**
      * Sets the value of the 'bidValue' field.
      * @param value The value of 'bidValue'.
      * @return This builder.
      */
    public avro.kafka.model.Proposal.Builder setBidValue(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.bidValue = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bidValue' field has been set.
      * @return True if the 'bidValue' field has been set, false otherwise.
      */
    public boolean hasBidValue() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bidValue' field.
      * @return This builder.
      */
    public avro.kafka.model.Proposal.Builder clearBidValue() {
      bidValue = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'author' field.
      * @return The value.
      */
    public avro.kafka.model.Author getAuthor() {
      return author;
    }


    /**
      * Sets the value of the 'author' field.
      * @param value The value of 'author'.
      * @return This builder.
      */
    public avro.kafka.model.Proposal.Builder setAuthor(avro.kafka.model.Author value) {
      validate(fields()[2], value);
      this.authorBuilder = null;
      this.author = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'author' field has been set.
      * @return True if the 'author' field has been set, false otherwise.
      */
    public boolean hasAuthor() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'author' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public avro.kafka.model.Author.Builder getAuthorBuilder() {
      if (authorBuilder == null) {
        if (hasAuthor()) {
          setAuthorBuilder(avro.kafka.model.Author.newBuilder(author));
        } else {
          setAuthorBuilder(avro.kafka.model.Author.newBuilder());
        }
      }
      return authorBuilder;
    }

    /**
     * Sets the Builder instance for the 'author' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public avro.kafka.model.Proposal.Builder setAuthorBuilder(avro.kafka.model.Author.Builder value) {
      clearAuthor();
      authorBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'author' field has an active Builder instance
     * @return True if the 'author' field has an active Builder instance
     */
    public boolean hasAuthorBuilder() {
      return authorBuilder != null;
    }

    /**
      * Clears the value of the 'author' field.
      * @return This builder.
      */
    public avro.kafka.model.Proposal.Builder clearAuthor() {
      author = null;
      authorBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Proposal build() {
      try {
        Proposal record = new Proposal();
        if (productBuilder != null) {
          try {
            record.product = this.productBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("product"));
            throw e;
          }
        } else {
          record.product = fieldSetFlags()[0] ? this.product : (avro.kafka.model.Product) defaultValue(fields()[0]);
        }
        record.bidValue = fieldSetFlags()[1] ? this.bidValue : (java.math.BigDecimal) defaultValue(fields()[1]);
        if (authorBuilder != null) {
          try {
            record.author = this.authorBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("author"));
            throw e;
          }
        } else {
          record.author = fieldSetFlags()[2] ? this.author : (avro.kafka.model.Author) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Proposal>
    WRITER$ = (org.apache.avro.io.DatumWriter<Proposal>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Proposal>
    READER$ = (org.apache.avro.io.DatumReader<Proposal>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










